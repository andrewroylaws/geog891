install.packages("arcgisbinding")
install.packages("arcgisbinding")
install.packages("installr")
library(installr)
updateR()
install.Rtools()
install.packages("arcgisbinding", repos="https://r.esri.com", type="win.binary")
libary(arcgisbinding)
library(arcgisbinding)
arc.check_product()
arc.portal_connect()
arc.check_portal()
states <- arc.open("https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/IND_Boundaries_2020/FeatureServer")
states <- arc.open("https://services8.arcgis.com/jzdN07B7ZhRTxuzU/arcgis/rest/services/Dauer_Trees/FeatureServer")
states_AGOL <- arc.open("https://services8.arcgis.com/jzdN07B7ZhRTxuzU/arcgis/rest/services/Dauer_Trees/FeatureServer")
states <- arc.shape2sf(states_AGOL)
states <- arc.select(states_AGOL)
states_AGOL <- arc.open("https://services8.arcgis.com/jzdN07B7ZhRTxuzU/arcgis/rest/services/Dauer_Trees/FeatureServer")
states <- arc.select(states_AGOL)
library(sf)
states_AGOL <- arc.open("https://services8.arcgis.com/jzdN07B7ZhRTxuzU/arcgis/rest/services/Dauer_Trees/FeatureServer")
states <- arc.select(states_AGOL)
states_AGOL <- arc.open("https://services8.arcgis.com/jzdN07B7ZhRTxuzU/arcgis/rest/services/Dauer_Trees/FeatureServer/0")
states <- arc.select(states_AGOL)
plot(states)
states <- arc.select(states_AGOL) %>% arc.data2sf()
plot(states)
plot(states$geometry)
library(tmap)
install.packages("tmap")
library(sf)
library(tmap)
states_AGOL <- arc.open("https://services2.arcgis.com/fQDJ6zNJPJ0yhFjv/arcgis/rest/services/IND_AdminBoundary/FeatureServer/1")
library(tmap)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(arcgisbinding)
library(sf)
library(tmap)
library(tidyverse)
states <- arc.select(states_AGOL) %>% arc.data2sf()
install.packages("readxl")
install.packages("readxl")
library(readxl)
#cranium data
cran <- read_excel(".\data\orig\India_Craniometric_Database_All_Data_4_Sept_2013.xlsx", sheet="Data")
#cranium data
cran <- read_excel("./data/orig/India_Craniometric_Database_All_Data_4_Sept_2013.xlsx", sheet="Data")
#cranium data
cran <- read_excel("./data/orig/India_Craniometric_Database_All_Data_4_Sept_2013.xlsx", sheet="Data")
#cranium data
cran <- read_excel("../data/orig/India_Craniometric_Database_All_Data_4_Sept_2013.xlsx", sheet="Data")
#India state boundaries
states_AGOL <- arc.open("https://services2.arcgis.com/fQDJ6zNJPJ0yhFjv/arcgis/rest/services/IND_AdminBoundary/FeatureServer/1")
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(arcgisbinding)
library(sf)
library(tmap)
library(tidyverse)
library(readxl)
#AGOL portal connection
arc.portal_connect("https://universityofne.maps.arcgis.com", "alaws2_Unl", "Fredbear101!")
#AGOL portal connection
arc.portal_connect("https://universityofne.maps.arcgis.com", "alaws2_Unl", "Fredbear101!")
#AGOL portal connection
arc.portal_connect("https://universityofne.maps.arcgis.com", "alaws2_Unl", "Fredbear101!")
#AGOL portal connection
arc.portal_connect("https://universityofne.maps.arcgis.com", "alaws2_Unl", "Fredbear101!")
arc.check_portal()
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(arcgisbinding)
library(sf)
library(tmap)
library(tidyverse)
library(readxl)
#AGOL portal connection
arc.portal_connect("https://universityofne.maps.arcgis.com", "alaws2_Unl", "Fredbear101!")
#India state boundaries
# states_AGOL <- arc.open("https://services8.arcgis.com/jzdN07B7ZhRTxuzU/arcgis/rest/services/india_states_2020/FeatureServer/0")
# states <- arc.select(states_AGOL) %>% arc.data2sf() #convert to sf
states <- sf::read_sf("../data/orig/india_states_2020.shp") %>% sf::st_make_valid()
#cranium data
cran <- read_excel("../data/orig/India_Craniometric_Database_All_Data_4_Sept_2013.xlsx", sheet="rdata")
# visualize states
tm_shape(states) + tm_polygons()
View(states_AGOL)
rm(states_AGOL)
# visualize states
tm_shape(states) + tm_borders()
# visualize states
tm_shape(states) + tm_polygons(col = "TOTPOP_CY")
View(cran)
# histogram of cran data by sex
hist(cran)
# histogram of cran data by sex
hist(cran$Sex)
# histogram of cran data by sex
hist(cran$Age)
cran %>% select(GOL) %>% hist
gol <- cran %>% select(GOL)
gol
?dplyr::select
gol <- cran %>% select(GOL) %>% drop_na()
gol
hist(gol)
hist(as.int(gol))
?as
hist(as(gol, "numeric"))
gol <- cran %>% select(GOL) %>%
ggplot(., aes(x=GOL)) +
geom_histogram()
gol
gol <- cran %>%
ggplot(., aes(x=GOL)) +
geom_histogram() +
gol
rlang::last_error()
gol <- cran %>%
ggplot(., aes(x=GOL)) +
geom_histogram()
gol
cran.factors <- dplyr::select(cran, "GOL:MAB")
cran.factors <- dplyr::select(cran, GOL:MAB)
View(cran.factors)
cran.factors <- dplyr::select(cran, GOL:ASB | FOL:ZYB)
cran.factors <- dplyr::select(cran, GOL:ASB | FOL:ZYB | UFHT:MAB)
ggplot(gather(cran.factors), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(arcgisbinding)
install.packages("arcgisbinding")
knitr::opts_chunk$set(echo = TRUE)
#libraries
# library(arcgisbinding)
library(sf)
library(tmap)
library(tidyverse)
library(readxl)
#cranium data
cran <- read_excel("../data/orig/India_Craniometric_Database_All_Data_4_Sept_2013.xlsx", sheet="rdata")
#India state boundaries
# states_AGOL <- arc.open("https://services8.arcgis.com/jzdN07B7ZhRTxuzU/arcgis/rest/services/india_states_2020/FeatureServer/0")
# states <- arc.select(states_AGOL) %>% arc.data2sf() #convert to sf
states <- sf::read_sf("../data/orig/india_states_2020.shp")
#cranium data
cran <- read_excel("../data/orig/India_Craniometric_Database_All_Data_4_Sept_2013.xlsx", sheet="rdata")
knitr::opts_chunk$set(echo = TRUE)
#libraries
# library(arcgisbinding)
library(sf)
library(tmap)
library(tidyverse)
library(readxl)
tm_shape(states) + tm_polygons(col = "TOTPOP_CY")
View(cran.factors)
ggplot(gather(cran.factors), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
tm_shape(states) + tm_polygons(col = "TOTPOP_CY")
ggplot(gather(cran.factors), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
View(cran)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(arcgisbinding)
knitr::opts_chunk$set(echo = TRUE)
#libraries
# library(arcgisbinding)
library(sf)
library(tmap)
library(tidyverse)
library(readxl)
#cranium data
cran <- read_excel("../data/orig/India_Craniometric_Database_All_Data_4_Sept_2013.xlsx", sheet="rdata")
#get counts of sexes
sexes.count <- cran %>% tally(sex)
#get counts of sexes
sexes.count <- cran %>% tally(Sex)
?tally
#get counts of sexes
sexes.count <- cran %>% tally()
sexes.count
#get counts of sexes
sexes.count <- cran %>% group_by(Sex) %>% tally()
sexes.count
# counts of observations by ISOCODE
state.count <- cran %>% group_by(ISOCODE) %>% tally()
state.count
srilanka <- sf::read_sf("https://gisapps.nsdi.gov.lk/server/rest/services/SLNSDI/Boundary/MapServer/7")
srilanka <- sf::st_read("https://gisapps.nsdi.gov.lk/server/rest/services/SLNSDI/Boundary/MapServer/7")
install.packages("httr")
install.packages("httr")
library(httr)
url <- parse_url("https://gisapps.nsdi.gov.lk/server/rest/services")
url$path <- paste(url$path, "SLNSDI/Boundary/MapServer/7/query", sep = "/")
url$query <- list(outFields = "*",
returnGeometry = "true",
f = "geojson")
request <- build_url(url)
srilanka <- st_read(request)
tm_shape(srilanka) + tm_polygons()
srilanka
url <- parse_url("https://gisapps.nsdi.gov.lk/server/rest/services")
url$path <- paste(url$path, "SLNSDI/Boundary/MapServer/7", sep = "/")
# url$query <- list(outFields = "*",
#                   returnGeometry = "true",
#                   f = "geojson")
request <- build_url(url)
srilanka <- st_read(request)
srilanka <- sf::st_read("https://gisapps.nsdi.gov.lk/server/rest/services/SLNSDI/Boundary/MapServer/7/query?where=&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&distance=&units=esriSRUnit_Foot&relationParam=&outFields=&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=&havingClause=&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&historicMoment=&returnDistinctValues=false&resultOffset=&resultRecordCount=&returnExtentOnly=false&datumTransformation=&parameterValues=&rangeValues=&quantizationParameters=&featureEncoding=esriDefault&f=html")
url <- parse_url("https://gisapps.nsdi.gov.lk/server/rest/services")
url$path <- paste(url$path, "SLNSDI/Boundary/MapServer/7/query", sep = "/")
url$query <- list(where = "*",
outFields = "*",
returnGeometry = "true",
f = "geojson")
request <- build_url(url)
srilanka <- st_read(request)
# sri lanka boundary
srla <- sf::read_sf("../data/orig/gadm36_LKA_0.shp")
# visualize srla
tm_shape(srla) + (tm_polygons())
# visualize states by population
tm_shape(states) + tm_polygons(col = "TOTPOP_CY") + tm_shape(srla) + tm_polygons()
# visualize states by population
tm_shape(states) + tm_polygons(col = "TOTPOP_CY") + tm_shape(srla) + tm_polygons(col = "#f1c232")
# sri lanka boundary
srla <- sf::read_sf("../data/orig/gadm36_LKA_0.shp") %>% sf:st_make_valid()
# sri lanka boundary
srla <- sf::read_sf("../data/orig/gadm36_LKA_0.shp") %>% sf::st_make_valid()
st_crs(states)
#set project crs
crs <- st_crs(states)
if st_crs(srla) != crs:
?if
?if
?if
asdf
if(st_crs(srla) != crs)  print("Nope")
if(st_crs(srla) != crs) st_transform(srla, crs = crs)
#full geometry
aoi <- rbind(states, srla)
st_transform(srla, crs = crs)
#full geometry
aoi <- rbind(states, srla)
srla <- st_transform(srla, crs = crs)
#full geometry
aoi <- rbind(states, srla)
#full geometry
# aoi <- rbind(states, srla) #needs to have columns changed
(aoi <- c(states, srla))
#full geometry
# aoi <- rbind(states, srla) #needs to have columns changed
aoi = st_union(states, srla)
View(aoi)
# counts of observations by ISOCODE
state.count <- cran %>% group_by(ISOCODE) %>% tally()
state.count
rm(gol)
rm(aoi)
rm(request)
rm(url)
rm(srilanka)
#find gol averages and mean by ISOCODE
gol.mean <- cran %>% select(ISOCODE, GOL) %>%
group_by(ISOCODE) %>%
summarise(., gol.mean = mean(GOL))
gol.mean()
?mean
gol.mean
#find gol averages and mean by ISOCODE
gol.stats <- cran %>% select(ISOCODE, GOL) %>%
group_by(ISOCODE) %>%
summarise(., gol.mean = mean(GOL) | gol.median = median(GOL))
#find gol averages and mean by ISOCODE
gol.stats <- cran %>% select(ISOCODE, GOL) %>%
group_by(ISOCODE) %>%
summarise(., gol.mean = mean(GOL), gol.median = median(GOL))
gol.stats
#join gol.stats to spatial
gol.sf <- left_join(states, gol.stats, by = c("ISO_CODE" = "ISOCODE"))
gol.sf
#join gol.stats to spatial
gol.sf <- inner_join(states, gol.stats, by = c("ISO_CODE" = "ISOCODE"))
gol.sf
tm_shape(gol.sf) + tm_polygons()
tm_shape(states) + tm_polygons(col = "tan") + tm_shape(gol.sf) + tm_polygons(col = "red")
#find gol averages and mean by ISOCODE
gol.sf <- cran %>% select(ISOCODE, GOL) %>%
group_by(ISOCODE) %>%
summarise(., gol.mean = mean(GOL), gol.median = median(GOL)) %>%
inner_join(states, gol.stats, by = c("ISO_CODE" = "ISOCODE"))
#visualize states that have data
tm_shape(states) + tm_polygons(col = "tan") + tm_shape(gol.sf) + tm_polygons(col = "gol.mean")
library(spdep)
install.packages(spdep)
install.packages("spdep")
library(spdep)
#calculate spatial weights
states.nb <- poly2nb(states)
states.nb
states.low <- nb2listw(states.nb)
states.lw <- nb2listw(states.nb)
?nb2listw
states.lw <- nb2listw(states.nb, zero.policy = TRUE)
states.lw
states.lw
states.lw <- nb2listw(states.nb, zero.policy = TRUE)
states.lw
print(states.lw, zero.policy = TRUE)
moran.test(gol.sf$gol.mean, states.lw)
#calculate neighbors
states.nb <- poly2nb(gol.sf)
states.lw <- nb2listw(states.nb, zero.policy = TRUE)
moran.test(gol.sf$gol.mean, states.lw)
moran.test(gol.sf$gol.mean, states.lw, zero.policy = TRUE)
states.lw <- nb2listw(states.nb, zero.policy = TRUE)
(gol.sf)
#calculate neighbors
states.nb <- poly2nb(gol.sf)
states.nb
states.lw <- nb2listw(gol.nb, zero.policy = TRUE)
#calculate neighbors
gol.nb <- poly2nb(gol.sf)
gol.nb
states.lw <- nb2listw(gol.nb, zero.policy = TRUE)
gol.lw <- nb2listw(gol.nb, zero.policy = TRUE)
gol.lw
card(gol.nb)
card(gol.nb) > 0
gol.nb <- subset(gol.nb, card(gol.nb) > 0)
gol.lw <- nb2listw(gol.nb, zero.policy = TRUE)
gol.lw
gol.sf.sub <- subset(gol.sf, car(gol.nb) > 0)
gol.sf.sub <- subset(gol.sf, card(gol.nb) > 0)
gol.sf.sub <- subset(gol.sf, subset = card(gol.nb) > 0)
plot.nb(gol.nb)
plot.nb(gol.sf)
?plot.nb
plot.nb(gol.nb, coords = gol.sf)
gol.lw <- nb2listw(gol.nb)
gol.lw
moran.test(gol.sf$gol.mean, gol.lw, zero.policy = TRUE)
#calculate neighbors
gol.nb <- poly2nb(gol.sf)
gol.lw <- nb2listw(gol.nb, zero.policy = TRUE)
moran.test(gol.sf$gol.mean, gol.lw, zero.policy = TRUE)
View(gol.sf)
gol.sf <- gol.sf %>% filter(., ISO_CODE != "INAN")
View(gol.sf)
View(gol.sf)
#calculate neighbors
gol.nb <- poly2nb(gol.sf)
gol.lw <- nb2listw(gol.nb)
gol.lw
moran.test(gol.sf$gol.mean, gol.lw)
?nb2listw
gol.lw <- nb2listw(gol.nb, style = "W")
moran.test(gol.sf$gol.mean, gol.lw)
moran.test(gol.sf$gol.median, gol.lw)
# test out using entire dataset
gol2 <- left_join(states, cran, by = c("ISO_CODE" = "ISOCODE"))
View(gol2)
View(sexes.count)
states.nb <- poly2nb(states)
states.nb
View(states)
states2 <- states %>% filter(., ISO_CODE != c("INAN", "INLD"))
states2 <- states %>% filter(., ISO_CODE !%in% c("INAN", "INLD"))
states2 <- states %>% filter(., ISO_CODE %in% c("INAN", "INLD"))
states2 <- states %>% filter(., !(ISO_CODE %in% c("INAN", "INLD")))
states.nb <- poly2nb(states)
states.nb
states.nb <- poly2nb(states2)
states.nb
gol2 <- left_join(states2, cran, by = c("ISO_CODE" = "ISOCODE"))
gol2.nb <- poly2nb(gol2)
