install.packages("rmarkdown")
x <- 7
s+3
5+3
x+3
knitr::opts_chunk$set(echo = TRUE)
x <- 7
x/2 ==0
```{r Week 1 code, include=TRUE}
```{r Week 1 code, include=FALSE}
```{r Week 1 code}
x/2 == 0
```{r Week 1 code, include=TRUE}
```{r Week 1 code}
x <- 7
x + 2
x * 8
x / 1
x ** 2
x/2 == 0
y <- c(1, 2, 3, 4, 5)
y + 2
c(1,2,3) + c(4,5,6)
z <- c(1, 2, "3")
z <- c(1, 2, "3")
mylist <- list(1, 2, "bananas")
mylist[2]
mydf
mydf <- data.frame(c("Huey", "Dewey", "Lousis"),
height = c(45, 43, 44))
mydf
mydf
mydf <- data.frame(names = c("Huey", "Dewey", "Lousis"),
height = c(45, 43, 44))
mydf
install.packages("tidyverse")
library(tidyverse)
filter(mydf, height > 43)
dplyr::filter(mydf, height > 43)
?dplyr::filter
x <- seq(1:20)
x <- seq(1, 20, 1)
x <- list(seq(1:20))
x[1]
x <- seq(1, 20, 0.5)
x <- seq(1, 20, 1)
sum(x)
length(x)
print(x
)
print(x)
typeof(8675309)
typeof(2)
typeof(int(8675309))
typeof(integer(8675309))
typeof(rep(1, 10))
typeof(list(1, 2, 3, "orange"))
library(tidyverse)
mydf <- read_csv("./ne_counties.csv")
mydf <- read_csv("./data/ne_counties.csv")
mydf
View(mydf)
View(mydf)
summary(mydf)
nrow(mydf)
ncol(mydf)
glimpse(mydf)
str(mydf)
mydf$Total
summary(mydf$Total)
hist(mydf$Total)
dplyr::filter(mydf, Total > 10000 & MedHousInc < 40000)
dplyr::filter(mydf, Total > 10000 & MedHousInc < 40000)
mydf %>% dplyr::filter(., Total > 10000 & MedHouseInc < 40000)
mydf %>% dplyr::filter(., Total > 10000 & MedHousInc < 40000)
mydf <- read_csv("./data/ne_counties.csv")
library(tidyverse)
mydf <- read_csv("./data/ne_counties.csv")
source("~/GEOG891/Week2.02.R", echo=TRUE)
library(ggplot2)
glipmse(mydf)
glimpse(mydf)
#plot 1
plot(mydf$Total, mydf$TotalUnits)
#plot 2
hist(mydf$M10to14Y)
#plot 2
hist(mydf$M10to14Y, breaks = 10)
#plot 2
hist(mydf$M10to14Y, breaks = 10)
#plot 2
hist(mydf$M10to14Y, breaks = 20)
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc))
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point()
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "blue")
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "blue") +
theme_minimal()
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "purple") +
theme_minimal()
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "red") +
theme_minimal()
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "blue") +
theme_minimal()
theme?
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "blue") +
theme_minimal() +
theme_dark()
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "blue") +
theme_minimal() +
theme_dark()
?ggplot::theme
?ggplot2::theme
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "blue") +
theme_minimal() +
labs(x = "Total opulation", y = "Per capita income")
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "blue") +
theme_minimal() +
labs(x = "Total population", y = "Per capita income")
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "blue") +
theme_minimal() +
labs(x = "Total population", y = "Per capita income", title = "Some ggplot stuff!")
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "blue") +
geom_smooth(method = "glm", color = "red")
summary(mydf2$sizeCategory)
# create categorical data
mydf2 <- mydf %>% mutate(sizeCategory = ifelse(Total > 20000, "big", "small"))
summary(mydf2$sizeCategory)
summary(as.factor(mydf2$sizeCategory))
#plot 4
ggplot(mydf2, aes(x = Total, y = PerCapInc)) +
geom_point(aes(shape = sizeCategory, color = sizeCategory), size = 3) +
theme_minimal() +
labs(x = "Total Pop", y = "Per capita income", title = "Reformated plot")
#plot 5 (boxplot)
mydf2 %>% ggplot(., aes(x = sizeCategory, y = PerCapInc)) +
geom_boxplot(aes(fill = sizeCategory)) +
theme_minimal() +
labs(x = "Categorical size",
y = "Per capita income",
title = "I made a boxplot",
subtitle = "It's handly")
#plot 5 (boxplot)
mydf2 %>% ggplot(., aes(x = sizeCategory, y = PerCapInc)) +
geom_boxplot(aes(fill = sizeCategory)) +
theme_minimal() +
labs(x = "Categorical size",
y = "Per capita income",
title = "Huzzah a boxplot",
subtitle = "It's handly")
#plot 6 histogram
ggplot(mydf2, aes(x = Female)) +
geom_histogram() +
theme_minimal() +
labs(x = "Population of women", y = "Count", title = "Histogram of women")
?geom_histogram
View(mydf)
#make new df and histogram
mydf3 <- mydf %>% mutate(FAdv = FMastDeg + FProfDeg + FDocDeg)
glimpse(mydf3$FAdv)
#glimpse(mydf3$FAdvDeg)
ggplot(mydf3, aes(x = FAdvDeg)) +
geom_histogram() +
theme_minimal() +
labs(x = "Women with advanced degrees", y = "Count", title = "Populations of women with advanced degrees")
# make new df and histogram ----
mydf3 <- mydf %>% mutate(FAdvDeg = FMastDeg + FProfDeg + FDocDeg)
#glimpse(mydf3$FAdvDeg)
ggplot(mydf3, aes(x = FAdvDeg)) +
geom_histogram() +
theme_minimal() +
labs(x = "Women with advanced degrees", y = "Count", title = "Populations of women with advanced degrees")
#glimpse(mydf3$FAdvDeg)
ggplot(mydf3, aes(x = FAdvDeg)) +
geom_histogram(bins = 30) +
theme_minimal() +
labs(x = "Women with advanced degrees", y = "Count", title = "Populations of women with advanced degrees")
theme_minimal() +
labs(x = "Total population", y = "Per capita income", title = "Some ggplot stuff!")
library(ggplot2)
library(tidyverse)
library(ggplot2)
mydf <- read_csv("./data/ne_counties.csv")
glimpse(mydf)
#plot 1
plot(mydf$Total, mydf$TotalUnits)
#plot 2
hist(mydf$M10to14Y, breaks = 20)
#plot 3 (customized)
ggplot(mydf, aes(x = Total, y = PerCapInc)) +
geom_point(color = "blue") +
geom_smooth(method = "glm", color = "red")
theme_minimal() +
labs(x = "Total population", y = "Per capita income", title = "Some ggplot stuff!")
# create categorical data
mydf2 <- mydf %>% mutate(sizeCategory = ifelse(Total > 20000, "big", "small"))
summary(mydf2$sizeCategory)
summary(as.factor(mydf2$sizeCategory))
#plot 4
ggplot(mydf2, aes(x = Total, y = PerCapInc)) +
geom_point(aes(shape = sizeCategory, color = sizeCategory), size = 3) +
theme_minimal() +
labs(x = "Total Pop", y = "Per capita income", title = "Reformated plot")
#plot 5 (boxplot)
mydf2 %>% ggplot(., aes(x = sizeCategory, y = PerCapInc)) +
geom_boxplot(aes(fill = sizeCategory)) +
theme_minimal() +
labs(x = "Categorical size",
y = "Per capita income",
title = "Huzzah a boxplot",
subtitle = "It's handly")
#plot 6 histogram
ggplot(mydf2, aes(x = Female)) +
geom_histogram() +
theme_minimal() +
labs(x = "Population of women", y = "Count", title = "Histogram of women")
# make new df and histogram ----
mydf3 <- mydf %>% mutate(FAdvDeg = FMastDeg + FProfDeg + FDocDeg)
#glimpse(mydf3$FAdvDeg)
ggplot(mydf3, aes(x = FAdvDeg)) +
geom_histogram(bins = 30) +
theme_minimal() +
labs(x = "Women with advanced degrees", y = "Count", title = "Populations of women with advanced degrees")
myfirstfunction(4, 8)
myfirstfuction <- function(x, y){
return (x + y)
}
myfirstfunction(4, 8)
myfirstfunction <- function(x, y){
return (x + y)
}
myfirstfunction(4, 8)
2 %% 1
3 %% 1
2 %% 2
3 %% 2
2 %% 2 == 4 %% 2
3 %% 2 == 5 %% 2
4 %% 2 == 5 %% 2
return x %% 2 == y %% 2
return(x %% 2 == y %% 2)
evenOdd(2, 10)
evenOdd <- function(x,y){
return(x %% 2 == y %% 2)
}
evenOdd(2, 10)
evenOdd(3.11, 3)
return(x %% 2 == y %% 2)
evenOdd <- function(x,y){
return(x %% 2 == y %% 2)
}
install.packages("raster")
#install.packages("raster")
raster::raster(".\data\cyano_max_7day.tif")
#install.packages("raster")
raster::raster(".\\data\\cyano_max_7day.tif")
install.packages("rdgal")
install.packages("rgdal")
#install.packages("rgdal")
raster::raster(".\\data\\cyano_max_7day.tif")
#install.packages("rgdal")
cyano <- raster::raster(".\\data\\cyano_max_7day.tif")
cyano
plot(cyano)
#install.packages("rgdal")
library(raster)
library(rgdal)
cyano <- raster::raster(".\\data\\cyano_max_7day.tif")
plot(cyano)
cyano
summary(cyano)
library(tidyverse)
library(sf)
p.counties <- "./data/County_Boundaries.shp"
p.stations <- "./data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
library(sf)
install.packages("sf")
library(sf)
p.counties <- "./data/County_Boundaries.shp"
p.stations <- "./data/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
d.counties <- sf::read_sf(p.counties)
d.statiosn <- sf::read_sf(p.stations)
glimpse(d.counties)
d.stations <- sf::read_sf(p.stations)
glimpse(d.stations)
d.counties.sub <- d.counties[1:10]
d.counties.sub <- d.counties[,1:10]
d.counties.sub <- d.counties[, c{1, 2}]
d.counties.sub <- d.counties[, c(1, 2)]
View(d.counties)
remove(cyano)
library(tidyverse)
rainfall <- c(0.0, 2.1, 2.5, 0.1, 0.0, 0.0, 6.8, 3.1, 2.2)
rainfall[1]
rainfall[0]
rainfall[1]
rainfall[1] >= 3
if (rainfall[1] >= 3){
print("big storm")
} else {
print("little storm")
}
if (rainfall[7] >= 3){
print("big storm")
} else {
print("little storm")
}
if (rainfall[1] >= 3){
print("big storm")
} else {
print("little storm")
}
f.storm.test(rainfall[2])
f.storm.test <- function(rainfallAmount){
if (rainfallAmount >= 3){
print("big storm")
} else {
print("little storm")
}
}
f.storm.test(rainfall[2])
f.storm.test(i)
for(i in rainfall){
f.storm.test(i)
}
print(i)
for(i in rainfall){
f.storm.test(i)
print(i)
}
print(i.index())
for(i in rainfall){
print(i.index())
f.storm.test(i)
}
?index
f.storm.test(i)
for(i in rainfall){
f.storm.test(i)
}
rainfall <- purr::map(., f.storm.test)
rainfall <- purrr::map(., f.storm.test)
rainfall %>% purrr::map(., f.storm.test)
storm.list <- rainfall %>% purrr::map(., f.storm.test)
rainfall %>% purrr::map(., f.storm.test)
delete(storm.list)
remove(storm.list)
max(rainfall)
which(rainfall == max(rainfall))
san <- which(rainfall == max(rainfall))
san
san <- which(rainfall == min(rainfall))
san
mydf <- read_csv("./data/ne_counties.csv")
max(mydf$MedValHous)
which(mydf$MedValHous == max(mydf$MedValHous))
df[47]
mydf[47]
mydf[[47]]
which(mydf$MedValHous == max(mydf$MedValHous)) %>% mydf[.,]
which(mydf$MedValHous == max(mydf$MedValHous)) %>% mydf[.,7:10]
which(mydf$MedValHous == max(mydf$MedValHous)) %>% mydf[.,]
which(mydf$MedValHous == max(mydf$MedValHous)) %>% mydf[.,:10]
which(mydf$MedValHous == max(mydf$MedValHous)) %>% mydf[.,1:10]
which(mydf$MedValHous == max(mydf$MedValHous)) %>% mydf[.,]
newdf <- mydf %>% mutate(deviation = MedValHouse -max(MedValueHouse))
newdf <- mydf %>% mutate(deviation = MedValHous -max(MedValueHous))
newdf <- mydf %>% mutate(deviation = MedValHous -max(MedValHous))
newdf <- mydf %>% mutate(deviation = MedValHous -max(MedValHous))
newdf <- mydf %>% mutate(deviation = MedValHous - max(MedValHous))
newdf <- ggplot(., aes(x = deviation)) +
geom_histogram() +
theme_minimal()
newdf <- mydf %>% mutate(deviation = MedValHous - max(MedValHous))
newdf <- ggplot(., aes(x = deviation)) +
geom_histogram() +
theme_minimal()
<-
newdf <- mydf %>% mutate(deviation = MedValHous - max(MedValHous))
newdf  %>%  ggplot(., aes(x = deviation)) +
geom_histogram() +
theme_minimal()
library(tidyverse)
library(sf)
library(GISTools)
install.packages("GISTools", "tmap")
install.packages("GISTools")
install.packages("tmap")
rm(list = ls())
#data
streams <- sf::read_sf("./data/Streams_303_d_.shp")
tm_shape(streams) + tm_lines()
library(GISTools)
library(tmap)
#data
streams <- sf::read_sf("./data/Streams_303_d_.shp")
tm_shape(streams) + tm_lines()
counties <- sf::read_sf("./data/County_Boundaries-_Census.shp")
counties_areas <- sf::st_area(counties)
counties_areas
tm_shape(counties)
tm_shape(counties) + tm_polygon()
tm_shape(counties) + tm_polygons()
st_is_valid(counties)
counties <- counties %>% mutate(area = sf::st_area(counties))
tm_shape(counties) + tm_polygons() +
tm_shape(lc) + tm_polygons()
#filter
lc <- counties %>% dplyr::filter(., NAME10 == "Lancaster")
tm_shape(counties) + tm_polygons() +
tm_shape(lc) + tm_polygons()
tm_shape(counties) + tm_polygons() +
tm_shape(lc) + tm_polygons(col = "red")
lc_303 <- streams[lc,]
tm_shape(counties) + tm_polygons() +
tm_shape(lc) + tm_polygons(col = "red") +
tm_shape(lc_303) + tm_lines(col = "blue")
lc_303ds <- sf::st_intersection(streams, lc)
tm_shape(counties) + tm_polygons() +
tm_shape(lc) + tm_polygons(col = "red") +
tm_shape(lc_303) + tm_lines(col = "Waterbody_")
lc_303ds
#buffer
lc_303ds.crs <- sf::st_crs(lc_303ds)
lc_303ds
buffs <- sf::st_buffer(lc_303ds, dist = 1000)
tm_shape(buffs) + tm_polygons(col = "Waterbody_")
#parks
parks <- sf::read_sf("./data/State_Park_Locations.shp")
#subset to lc
lc_parks <- sf::st_intersection(parks, lc)
#plot parks
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
#plot parks
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1.5)
#plot parks
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = "GISAcres")
#plot parks
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
#combine plots
tm_shape(lc_303) + tm_lines(col = "Waterbody_") +
tm_shape(lc_parks) + tm_dots(col = "AreaName", size = 1)
#buffer
lc_303ds.crs <- sf::st_crs(lc_303ds)
lc_303ds.crs
#final task
buff_streams <- sf::st_buffer(streams, dist = 800)
park_stream <- sf::st_intersection(buff_streams, parks)
park_stream <- st_sf(sf::st_intersection(buff_streams, parks))
tm_shape(park_stream) + tm_dots(col = "Waterbody_")
tm_shape(park_stream) + tm_dots(col = "Waterbody_", size = 2)
#final task
streams.feet <- sf::st_transform(streams, 102704)
sf::st_crs(streams.feet)
tm_shape(counties) + tm_polygons() +
tm_shape(lc) + tm_polygons(col = "red") +
tm_shape(lc_303) + tm_lines(col = "Waterbody_")
tm_shape(counties) + tm_polygons() +
tm_shape(lc) + tm_polygons(col = "red") +
tm_shape(lc_303) + tm_lines(col = "blue")
tm_shape(counties) + tm_polygons() +
tm_shape(lc) + tm_polygons(col = "red") +
tm_shape(lc_303ds) + tm_lines(col = "blue")
tm_shape(counties) + tm_polygons() +
tm_shape(lc) + tm_polygons(col = "red") +
tm_shape(lc_303ds) + tm_lines(col = "blue") +
tm_shape(lc_303) + tm_lines(col = "yellow")
tm_shape(counties) + tm_polygons() +
tm_shape(lc) + tm_polygons(col = "red") +
tm_shape(lc_303) + tm_lines(col = "blue") +
tm_shape(lc_303ds) + tm_lines(col = "yellow")
