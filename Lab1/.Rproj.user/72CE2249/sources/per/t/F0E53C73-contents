---
title: "Lab1"
author: "Andrew Laws"
date: "9/16/2021"
output:
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
library(sp)

#set data
p.counties <- "./data/orig/County_Boundaries.shp"
p.stations <- "./data/orig/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"

#load into sf
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
```

```{r EDA, include=FALSE}
glimpse(d.counties)
glimpse(d.counties)
```
```{r functions, include=FALSE}
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()

d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()

d.counties %>% dplyr::select(-(GEOID10:CLASSFP10)) %>% head()
```

# Task 1: Basic data manipulation

### 1.1
```{r 1.1}
#create new df
task1.1 <- d.counties %>% group_by(STATEFP10) %>% #group variables by state and mutate column that holds state area
  mutate(stateArea = sum(ALAND10 + AWATER10)) %>% #mutate column that divides land area by state area
  ungroup(.) %>% 
  mutate(perLandAreaState = ALAND10/stateArea * 100) #create percentage variable by dividing land by state area and multiplying by 100

glimpse(task1.1$perLandAreaState)
```
### 1.2
```{r 1.2}
#group by state, find max of awater10/state area using slice
task1.2 <- task1.1 %>% as_tibble() %>% 
  group_by(STATEFP10) %>% 
  mutate(perWaterAreaState = AWATER10/stateArea * 100) %>% 
  slice(which.max(perWaterAreaState))

#create df with only state and county name columns
task1.2 <- task1.2 %>% ungroup() %>% 
  dplyr::select(STATEFP10, NAMELSAD10)

task1.2
```
### 1.3
```{r 1.3}
#Use count function 
task1.3 <- d.counties %>% as_tibble %>% 
  count(STATEFP10)
task1.3
```
### 1.4
```{r 1.4}
#use mutate function to create new column with character length
task1.4 <- d.stations %>% as_tibble() %>% 
  mutate(., stNameLen = nchar(STATION_NA)) %>%  
  slice(which.min(stNameLen)) %>% #slice out the row with the min number of characters
  dplyr::select(STATION_NA) #retain only station name

task1.4
```

# Task 2: Plotting attribute data

### 2.1
```{r 2.1, echo=FALSE}
d.counties %>% 
  ggplot(aes(x = ALAND10, y = AWATER10)) + #set land on x and water on y
  geom_point(aes(color = STATEFP10)) + #set color aestethic to state fips code
  labs(title = "Relationship of land and water areas", x = "Land Area",
       y = "Water Area", col = "State Code")
```

### 2.2
```{r 2.2, echo=FALSE}
d.stations %>% 
  ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
  geom_histogram() + #create histogram
  labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
       y = "Count")
```

### 2.3
```{r 2.3, echo=FALSE}
#create new df
task2.2 <- d.stations %>% 
  #get state using stubstring function
  mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA))) 

task2.2 %>% ggplot(aes(x = Drainage_A, fill = stateName)) + #set drainage ares on x axis
  geom_histogram() + #create histogram
  labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
       y = "Count", col = "State")
```

# Task 3: Write a function

### 3.1
```{r 3.1}
task3.1 <- function(numVect){
  isVec <- is.vector(numVect) #test if it is vector
  isNum <- is.numeric(numVect) #test if list is all numeric
  if(isVec == TRUE & isNum == TRUE) { #check that tests are both TRUE
    
    statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect)) #create list with stat values
    
    sortVec <- sort(numVect) #sort vector from least to greatest

    result <- list(statList, sortVec) #combines desired data into one object for return function
     
    return(result) #return result
    
  } else{
    cat("Troubleshooting Errors\n") #provide information on why vector failed tests
    cat("Vector: ", isVec, "\n") #provides details on whether input data was vector or not
    cat("Numbers:", isNum, "\n") #provides detaisl on whether input data contained all numbers
  }
}

#Test 1
task3.1(c(1, 0, -1))

#Test 2
task3.1(c(10, 100, 1000))

#Test 3
task3.1(c(.1, .001, 1e8))

#Test 4
task3.1(c("a", "b", "c"))
```

# Task 4: Spatial analysis

### 4.1
```{r 4.1}
st_is_valid(d.counties) #was throwing an error so threw in to check
d.counties2 <- st_make_valid(d.counties) #make data valid for work
st_is_valid(d.counties2) #check success of make_valid

st_is_valid(d.stations) #check stations while at it

d.stations2 <- sf::st_intersection(d.stations, d.counties2) #intersect so stations get counties df info

task4.1 <- d.stations2 %>% as_tibble() %>% #count number of features per STATEFP10
  count(STATEFP10)

task4.1
```

### 4.2
```{r 4.2}
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
  mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
  as_tibble() %>% #convert to tibble
  summarize(mean(polyArea)) #calculate mean

task4.2
```
### 4.3
```{r 4.3}
meanDrain <- d.stations2 %>% as_tibble() %>% #d.stations2 was updated in task 4.1 so no spatial ops needed
  group_by(STATEFP10) %>% #group by state 
  summarize(mean(Drainage_A))

maxPos <- which.max(meanDrain$`mean(Drainage_A)`) #find the rowwhere the largest mean drainage is

task4.3 <- meanDrain[maxPos,] #subset tibble

task4.3
```

# Questions

1. In using the intersection functions, are the following two statements equivalent? If not, explain how. Be sure to think about BOTH the spatial data structures AND the attribute data. Would your answer be different if we were using different types of data?

```
 sf::st_intersection(d.stations, del.counties)
 sf::st_intersection(del.counties, d.stations)
```

These two statements are not equivalent. Both result in a sf object with POINT geometry,
as the stations represent the geometry where both overlap (the st_intersection function
appears to do this because points are not 2D). The difference comes from when both sf 
objects in the function have the same column name, in which the column from the first
is retained in the resulting geometry df.

See the following chunk for proof of same geometry type.

```{r Q1 geos, include= TRUE, echo=FALSE}
d.stations3 <- sf::st_intersection(d.stations, d.counties2)
st_geometry(d.stations3) #get geometry of sf object

d.counties3 <- sf::st_intersection(d.counties2, d.stations)
st_geometry(d.counties3) #get geometry of sf object
```

2. What did you find challenging in this lab? What was new?

I found the df/tibble manipulations the hardest. It was confusing at times to do a group_by
then mutate or filter the data. Also, filter and select seem equivalent to me at times and 
I forget which one to use. Otherwise, much of the spatial details makes sense as other pro-
grams and languages use similar methods.

3. What types of activities would you like to see in labs this semester?

I would enjoy a lab where we perform spatial analysis and then be given an audience or to
that we need to produce a report-style document with figures and maps. I feel this would
be a chance to try a real world application of the Markdown.