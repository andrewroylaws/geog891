task1.2 <- task1.1 %>% group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
max(perWaterAreaState)
#Psuedocode
#group by state, find max of awater10/state area
task1.2 <- task1.1 %>% group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
max(task1.2$perWaterAreaState)
max(task1.2$perWaterAreaState)
#Psuedocode
#group by state, find max of awater10/state area
task1.2 <- task1.1 %>% group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100)
max(task1.2$perWaterAreaState)
?max
#Psuedocode
#group by state, find max of awater10/state area
task1.2 <- task1.1 %>% group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState, na.rm = TRUE))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState, na.rm = TRUE))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100)
summarise(max = max(perWaterAreaState, na.rm = TRUE))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState, na.rm = TRUE))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.2 <- task1.1
task1.2 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState))
task1.2 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
lgPerWater <- task1.2 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
task1.2 <- task1.2 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
#create df with only state and county name columns
wettest_counties <- task1.2 %>% dplyr::select(ALAND10, NAMELSAD10)
#create df with only state and county name columns
wettest_counties <- task1.2 %>% ungroup() %>%
dplyr::select(ALAND10, NAMELSAD10)
wettest_counties
#create df with only state and county name columns
wettest_counties <- task1.2 %>% ungroup() %>%
dplyr::select(STATEFP10, NAMELSAD10)
wettest_counties
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
library(sp)
#set data
p.counties <- "./data/orig/County_Boundaries.shp"
p.stations <- "./data/orig/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#load into sf
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
#Use count function
task1.3 <- d.counties %>% count(NAME10, STATEFP10)
#Use count function
task1.3 <- d.counties %>% as_tibble %>%
count(NAME10, STATEFP10)
task1.3
#Use count function
task1.3 <- d.counties %>% as_tibble %>%
count(STATEFP10)
task1.3
#use mutate function to create new column
task1.4 <- d.stations %>% as_tibble() %>%
mutate(., stNameLen = nchar(STATION_NA)) %>%
slice(which.max(stNameLen))
#set tibble to only show station name
task1.4 <- task1.4 %>% dplyr::select(STATION_NA)
task1.4
#use mutate function to create new column with character length
task1.4 <- d.stations %>% as_tibble() %>%
mutate(., stNameLen = nchar(STATION_NA)) %>%
slice(which.max(stNameLen)) %>% #slice out the row with the max number of charactes
dplyr::select(STATION_NA)
task1.4
#use mutate function to create new column with character length
task1.4 <- d.stations %>% as_tibble() %>%
mutate(., stNameLen = nchar(STATION_NA)) %>%
slice(which.max(stNameLen)) %>% #slice out the row with the max number of charactes
dplyr::select(STATION_NA) %>%
as_vector(.)
#use mutate function to create new column with character length
task1.4 <- d.stations %>% as_tibble() %>%
mutate(., stNameLen = nchar(STATION_NA)) %>%
slice(which.max(stNameLen)) %>% #slice out the row with the max number of charactes
dplyr::select(STATION_NA) %>%
as_vector(.)
task1.4
#use mutate function to create new column with character length
task1.4 <- d.stations %>% as_tibble() %>%
mutate(., stNameLen = nchar(STATION_NA)) %>%
slice(which.min(stNameLen)) %>% #slice out the row with the max number of charactes
dplyr::select(STATION_NA) #retain only station name
task1.4
#group by state, find max of awater10/state area using slice
task1.2 <- task1.2 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
#create df with only state and county name columns
wettest_counties <- task1.2 %>% ungroup() %>%
dplyr::select(STATEFP10, NAMELSAD10)
wettest_counties
#group by state, find max of awater10/state area using slice
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
#create df with only state and county name columns
wettest_counties <- task1.2 %>% ungroup() %>%
dplyr::select(STATEFP10, NAMELSAD10)
wettest_counties
print(wettest_counties)
?mutate
?geom_point
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) +
geom_point(color = STATEFP10)
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) +
geom_point(aes(color = STATEFP10))
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) +
geom_point(aes(color = STATEFP10)) +
labs(title = "Relationship of land to water")
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) +
geom_point(aes(color = STATEFP10)) +
labs(title = "Relationship of land to water for counties")
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) + #set land on x and water on y
geom_point(aes(color = STATEFP10)) + #set color aestethic to state fips code
labs(title = "Relationship of land to water for counties")
d.stations %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram() +
labs(title = "Histogram of drainage areas")
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) + #set land on x and water on y
geom_point(aes(color = STATEFP10)) + #set color aestethic to state fips code
labs(title = "Relationship of land to water for counties", x = "Land Area")
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) + #set land on x and water on y
geom_point(aes(color = STATEFP10)) + #set color aestethic to state fips code
labs(title = "Relationship of land and water areas", x = "Land Area",
y = "Water Area")
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) + #set land on x and water on y
geom_point(aes(color = STATEFP10, size = 2)) + #set color aestethic to state fips code
labs(title = "Relationship of land and water areas", x = "Land Area",
y = "Water Area")
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) + #set land on x and water on y
geom_point(aes(color = STATEFP10, )) + #set color aestethic to state fips code
labs(title = "Relationship of land and water areas", x = "Land Area",
y = "Water Area", fill = "State Code")
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) + #set land on x and water on y
geom_point(aes(color = STATEFP10, )) + #set color aestethic to state fips code
labs(title = "Relationship of land and water areas", x = "Land Area",
y = "Water Area", col = "State Code")
d.stations %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram() +
labs(title = "Station Drainage Areas", x = "Drainage Area Size",
y = "Count")
d.stations %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram(aes(color = "red")) +
labs(title = "Station Drainage Areas", x = "Drainage Area Size",
y = "Count")
d.stations %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram() +
labs(title = "Station Drainage Areas", x = "Drainage Area Size",
y = "Count")
d.stations %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
d.stations %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram(aes(color = STATEFP10)) + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
d.stations %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram(fill= STATEFP10) + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
View(d.stations)
?substr
pd = "Jackson, MI"
substr(pd, -2)
substr(pd, -2, -1)
substr(pd, nchar(pd)-2, nchar(pd))
substr(pd, nchar(pd)-1, nchar(pd))
d.stations %>%
mutate(., stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA))) %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram(fill= stateName) + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
d.stations %>%
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA))) %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram(fill= stateName) + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
d.stations %>%
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA)))
task2.2 <- d.stations %>%
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA)))
task2.2 <- task2.2 %>% select(., stateName)
task2.2
task2.2 <- d.stations %>%
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA)))
task2.2 %>% ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram(fill= stateName) + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
task2.2 %>% ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram(fill = stateName) + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
geom_histogram(aes(fill = stateName) + #create histogram
task2.2 <- d.stations %>%
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA)))
task2.2 %>% ggplot(aes(x = Drainage_A, fill = stateName)) + #set drainage ares on x axis
task2.2 <- d.stations %>%
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA)))
task2.2 %>% ggplot(aes(x = Drainage_A, fill = stateName)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
task2.2 <- d.stations %>%
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA)))
task2.2 %>% ggplot(aes(x = Drainage_A, fill = stateName)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
task2.2 %>% ggplot(aes(x = Drainage_A, fill = stateName)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count", col = "State")
#create new df
task2.2 <- d.stations %>%
#get state using stubstring function
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA)))
task2.2 %>% ggplot(aes(x = Drainage_A, fill = stateName)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count", col = "State")
task3.1 <- function(numberVector){
isNumVec <- is.vector(numberVector) #test if it is vector
if(isNumVec == TRUE) {
print("is a vector")
}
}
task3.1(c(1, 3, 4))
task3.1(c(1, 3, 4, "n"))
if(isVec == TRUE & isNum == TRUE) {
print("is a number vector")
}
task3.1 <- function(numberVector){
isVec <- is.vector(numberVector) #test if it is vector
isNum <- is.numeric(numberVector)
if(isVec == TRUE & isNum == TRUE) {
print("is a number vector")
}
}
task3.1(c(1, 3, 4, "n"))
task3.1 <- function(numberVector){
isVec <- is.vector(numberVector) #test if it is vector
isNum <- is.numeric(numberVector)
if(isVec == TRUE & isNum == TRUE) {
print("is a number vector")
}
}
task3.1(c(1, 3, 4, "n"))
if(isVec == TRUE and isNum == TRUE) {
task3.1 <- function(numberVector){
isVec <- is.vector(numberVector) #test if it is vector
isNum <- is.numeric(numberVector)
if(isVec == TRUE and isNum == TRUE) {
t = c(3, 2, 5)
t
summary(t)
task3.1 <- function(numberVector){
isVec <- is.vector(numberVector) #test if it is vector
if(isVec == TRUE) {
print("is a number vector")
}
}
task3.1(c(1, 3, 4, "n"))
task3.1(c(1, 3, 4, 3.3))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
if(isVec == TRUE) {
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
print(vecMean, vecMed, vecMax, vecMin)
}
}
task3.1(c(1, 3, 4, 3.3))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
if(isVec == TRUE) {
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
print(vecMean)
}
}
task3.1(c(1, 3, 4, 3.3))
mean(numVect) %>% print(.)
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
if(isVec == TRUE) {
mean(numVect) %>% print(.)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
print(vecMean)
}
}
task3.1(c(1, 3, 4, 3.3))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
if(isVec == TRUE) {
mean(numVect) %>% print(.)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
}
}
task3.1(c(1, 3, 4, 3.3))
test <- c(3, "n", 2)
is.numeric(test)
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect)
if(isVec == TRUE & isNum == TRUE) {
mean(numVect) %>% print(.)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
}
}
task3.1(c(1, 3, 4, 3.3))
task3.1(c(1, 3, 4, "3.3"))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect)
if(isVec == TRUE & isNum == TRUE) {
mean(numVect) %>% print(.)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting:")
print("Vector:", isVec)
print("Numbers:", isNum)
}
}
task3.1(c(1, 3, 4, "3.3"))
print("Vector: " + isVec)
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect)
if(isVec == TRUE & isNum == TRUE) {
mean(numVect) %>% print(.)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting:")
print("Vector: " + isVec)
print(isVec)
print("Numbers:", isNum)
}
}
task3.1(c(1, 3, 4, "3.3"))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect)
if(isVec == TRUE & isNum == TRUE) {
mean(numVect) %>% print(.)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting:")
print("Vector:")
print(isVec)
print("Numbers:", isNum)
}
}
task3.1(c(1, 3, 4, "3.3"))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect)
if(isVec == TRUE & isNum == TRUE) {
mean(numVect) %>% print(.)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4, "3.3"))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- as.list(mean(numVect), median(numVect), max(numVect), min(numVect))
print(statList)
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4, "3.3"))
task3.1(c(1, 3, 4))
?list
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- as.list(c(mean(numVect), median(numVect), max(numVect), min(numVect)))
print(statList)
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4))
