isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect)
if(isVec == TRUE & isNum == TRUE) {
mean(numVect) %>% print(.)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting:")
print("Vector:")
print(isVec)
print("Numbers:", isNum)
}
}
task3.1(c(1, 3, 4, "3.3"))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect)
if(isVec == TRUE & isNum == TRUE) {
mean(numVect) %>% print(.)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4, "3.3"))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- as.list(mean(numVect), median(numVect), max(numVect), min(numVect))
print(statList)
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4, "3.3"))
task3.1(c(1, 3, 4))
?list
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- as.list(c(mean(numVect), median(numVect), max(numVect), min(numVect)))
print(statList)
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
library(sp)
#set data
p.counties <- "./data/orig/County_Boundaries.shp"
p.stations <- "./data/orig/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#load into sf
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
glimpse(d.counties)
glimpse(d.counties)
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
d.counties %>% dplyr::select(-(GEOID10:CLASSFP10)) %>% head()
d.counties %>% group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10))
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>%
group_by(STATEFP10) %>%
summarise(stateLandArea = sum(ALAND10))
d.counties %>%
ggplot(., aes(x = as.factor(STATEFP10), y = ALAND10)) +
geom_boxplot(aes(fill = STATEFP10))
d.counties %>%
ggplot(., aes(x = ALAND10)) +
geom_histogram(aes(fill = STATEFP10)) +
labs(title = "not the most usefull plot")
d.counties %>% sf::st_crs()
d.stations %>% sf::st_crs()
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
del.counties <- d.counties %>% dplyr::filter(STATEFP10 == 10)
del.stations <- sf::st_intersection(d.stations, del.counties)
glimpse(del.stations)
plot(del.stations)
del.counties %>% st_area()
#create new df
task1.1 <- d.counties %>% group_by(STATEFP10) %>% #group variables by state and mutate column that holds state area
mutate(stateArea = sum(ALAND10 + AWATER10)) %>% #mutate column that divides land area by state area
ungroup(.) %>%
mutate(perLandAreaState = ALAND10/stateArea * 100) #create percentage variable by dividing land by state area and multiplying by 100
glimpse(task1.1$perLandAreaState)
#group by state, find max of awater10/state area using slice
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
#create df with only state and county name columns
wettest_counties <- task1.2 %>% ungroup() %>%
dplyr::select(STATEFP10, NAMELSAD10)
wettest_counties
#Use count function
task1.3 <- d.counties %>% as_tibble %>%
count(STATEFP10)
task1.3
#use mutate function to create new column with character length
task1.4 <- d.stations %>% as_tibble() %>%
mutate(., stNameLen = nchar(STATION_NA)) %>%
slice(which.min(stNameLen)) %>% #slice out the row with the min number of characters
dplyr::select(STATION_NA) #retain only station name
task1.4
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) + #set land on x and water on y
geom_point(aes(color = STATEFP10)) + #set color aestethic to state fips code
labs(title = "Relationship of land and water areas", x = "Land Area",
y = "Water Area", col = "State Code")
d.stations %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
#create new df
task2.2 <- d.stations %>%
#get state using stubstring function
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA)))
task2.2 %>% ggplot(aes(x = Drainage_A, fill = stateName)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count", col = "State")
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- as.list(c(mean(numVect), median(numVect), max(numVect), min(numVect)))
print(statList)
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4))
statList <- as.list(c(mean(numVect)[1], median(numVect), max(numVect), min(numVect)))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- as.list(c(mean(numVect)[1], median(numVect), max(numVect), min(numVect)))
print(statList)
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4))
print(aslist(3, 4, 5))
print(as.list(3, 4, 5))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- list(c(mean(numVect)[1], median(numVect), max(numVect), min(numVect)))
print(statList)
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4))
print(list(3, 4, 5))
task3.1(c(1, 3, 4))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- list(c(mean(numVect), median(numVect), max(numVect), min(numVect)))
print(statList)
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect))
print(statList)
vecMean <- mean(numVect)
vecMed <- median(numVect)
vecMax <- max(numVect)
vecMin <- min(numVect)
#print(vecMean)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4))
print(sortVec)
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect))
print(statList)
sortVec <- sort(numVect)
print(sortVec)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4))
print("Stats: mean, median, maximum, and minumum")
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect))
print("Stats: mean, median, maximum, and minumum")
print(statList)
sortVec <- sort(numVect)
print(sortVec)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4))
for(i in statList) print(i)
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) {
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect))
print("Stats: mean, median, maximum, and minumum")
for(i in statList) print(i)
sortVec <- sort(numVect)
print(sortVec)
} else{
print("Troubleshooting errors:")
print("Vector:")
print(isVec)
print("Numbers:")
print(isNum)
}
}
task3.1(c(1, 3, 4))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) { #check that tests are both TRUE
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect)) #create list with stat values
print("Stats: mean, median, maximum, and minumum") #detail what will be printed
print(statList) #print list of stats
sortVec <- sort(numVect) #sort vector from least to greatest
print("Values in vector sorted from least to greatest") #detail what will be printed
print(sortVec) #print sorted list
} else{
print("Troubleshooting errors:") #provide information on why vector failed tests
print("Vector:")
print(isVec) #provides details on whether input data was vector or not
print("Numbers:")
print(isNum) #provides detaisl on whether input data contained all numbers
}
}
#Test 1
task3.1(c(1, 0, -1))
#Test 2
task3.1(c(10, 100, 1000))
#Test 3
task3.1(c(.1, .001, 1e8))
#Test 4
task3.1(c("a", "b", "c"))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) { #check that tests are both TRUE
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect)) #create list with stat values
print("Stats: mean, median, maximum, and minumum") #detail what will be printed
print(statList) #print list of stats
sortVec <- sort(numVect) #sort vector from least to greatest
print("Values in vector sorted from least to greatest") #detail what will be printed
print(sortVec) #print sorted list
} else{
print("Troubleshooting Errors") #provide information on why vector failed tests
print("Vector:")
print(isVec) #provides details on whether input data was vector or not
print("Numbers:")
print(isNum) #provides detaisl on whether input data contained all numbers
}
}
#Test 1
task3.1(c(1, 0, -1))
#Test 2
task3.1(c(10, 100, 1000))
#Test 3
task3.1(c(.1, .001, 1e8))
#Test 4
task3.1(c("a", "b", "c"))
task4.1 <- sf::st_intersection(d.counties, d.stations)
task4.1 <- sf::st_intersection(as_sf(d.counties), as_sf(d.stations))
?as_sf
?as.sf
?sf
task4.1 <- sf::st_intersection(st_sf(d.counties), st_sf(d.stations))
st_is_valid(d.counties)
st_is_valid(d.counties, reason = TRUE)
suppressWarnings(st_is_valid(d.counties, reason = TRUE))
task4.1 <- st_make_valid(d.counties)
d.counties2 <- st_make_valid(d.counties)
st_is_valid(d.counties2)
st_is_valid(d.stations) #check stations while at it
task4.1 <- sf::st_intersection(d.counties2, d.stations)
task4.1 <- sf::st_intersection(d.counties2, d.stations)
summary(task4.1
plot(task4.1)
plot(task4.1)
plot(task4.1$STATEFP10)
plot(task4.1$geometry)
d.stations2 <- sf::st_intersection(d.counties2, d.stations) #intersect so stations get counties df info
?as_df
??as_df
task4.1 <- d.stations2 %>% as_tibble() %>%
count(., vars = "STATEFP10")
task4.1
task4.1 <- d.stations2 %>% as_tibble() %>%
count(., vars = "OBJECTID", wt_var = "STATEFP10")
task4.1
task4.1 <- d.stations2 %>% as_tibble() %>%
count(., vars = "GEOID10", wt_var = "STATEFP10")
task4.1
task4.1 <- d.stations2 %>% as_tibble() %>%
count(., vars = "GEOID10")
task4.1
task4.1 <- d.stations2 %>% as_tibble() %>%
count(., c("GEOID10", "STATEFP10"))
task4.1
task4.1 <- d.stations2 %>% as_tibble() %>%
count(., c("GEOID10", "STATEFP10"))
task4.1 <- d.stations2 %>% as_tibble() %>%
count(STATEFP10)
task4.1
d.counties2$geometry[1,]
d.counties2$geometry
?st_area
?st_geod_area
# NY FIPS = 36
task4.2 <- d.counties2 %>% mutate(area = sf::st_area())
# NY FIPS = 36
task4.2 <- d.counties2 %>% mutate(area = st_area(geometry))
task4.2$area
# NY FIPS = 36
task4.2 <- d.counties2 %>% mutate(area = st_area(geometry)) %>%
mutate(area2 = ALAND10 + AWATER10)
task4.2$area == task4.2$area2
task4.2$area
task4.2$area
task4.2$area2
# NY FIPS = 36
task4.2 <- d.counties2 %>% select(STATEFP10 == 36) %>% # select counties in NY
mutate(area = st_area(geometry)) %>% #calculate area of counties
summarise(mean(area))
# NY FIPS = 36
task4.2 <- d.counties2 %>% select(STATEFP10 = 36) %>% # select counties in NY
mutate(area = st_area(geometry)) %>% #calculate area of counties
summarise(mean(area))
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 = 36) %>% # select counties in NY
mutate(area = st_area(geometry)) %>% #calculate area of counties
summarise(mean(area))
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(area = st_area(geometry)) %>% #calculate area of counties
summarise(mean(area))
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>% #calculate area of counties
mean(polyArea)
task4.2
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>% #calculate area of counties
mean(polyArea)
task4.2
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) #calculate area of counties
mean(task4.2$polyArea)
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
mean(d.counties2$polyArea)
task4.2
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
c(mean(d.counties2$polyArea))
task4.2
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
summarize(mean(d.counties2$polyArea))
task4.2
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
as_tibble() %>%
summarize(mean(d.counties2$polyArea))
task4.2
# summarize(mean(d.counties2$polyArea))
task4.2
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
as_tibble()
# summarize(mean(d.counties2$polyArea))
task4.2
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
as_tibble() %>%
summarize(mean(as.double(d.counties2$polyArea)))
task4.2
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
as_tibble() %>%
summarize(mean(as.double(d.counties2$polyArea)))
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
as_tibble() %>%
summarize(mean(as.double(polyArea)))
task4.2
summarize(mean((polyArea))
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
as_tibble() %>%
summarize(mean(polyArea))
task4.2
print(task4.2)
