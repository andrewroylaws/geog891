install.packages("reprex")
?reprex
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
library(sp)
#set data
p.counties <- "./data/orig/County_Boundaries.shp"
p.stations <- "./data/orig/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#load into sf
d.counties <- sf::read_sf(p.counties)
d.stations <- sf.read_sf(p.stations)
d.stations <- sf::read_sf(p.stations)
glimpse(d.counties)
glimpse(d.counties)
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(~GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(~(GEOID10, ALAND10)) %>% head()
d.counties %>% dplyr::select(~GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(GEOID10:ALAND10) %>% head()
d.counties %>% dplyr::select(~(GEOID10:ALAND10)) %>% head()
d.counties %>% dplyr::select(~(GEOID10:CLASSFP10)) %>% head()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
library(sp)
#set data
p.counties <- "./data/orig/County_Boundaries.shp"
p.stations <- "./data/orig/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#load into sf
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
d.counties %>% dplyr::select(~(GEOID10:CLASSFP10)) %>% head()
d.counties %>% dplyr::select(-(GEOID10:CLASSFP10)) %>% head()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
library(sp)
#set data
p.counties <- "./data/orig/County_Boundaries.shp"
p.stations <- "./data/orig/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#load into sf
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
d.counties %>% group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10))
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>%
group_by(STATEFP10) %>%
summarise(stateLandArea = sum(ALAND10))
d.counties %>%
ggplot(., aes(x = as.factor(STATEFP10), y = ALAND10)) +
geom_boxplot(aes(fill = STATEFP10))
d.counties %>%
ggplot(., aes(x = STATEFP10, y = ALAND10)) +
geom_boxplot(aes(fill = STATEFP10))
d.counties %>%
ggplot(., aes(x = as.factor(STATEFP10), y = ALAND10)) +
geom_boxplot(aes(fill = STATEFP10))
d.counties %>%
ggplot(., aes(x = as.factor(STATEFP10), y = ALAND10)) +
geom_boxplot(aes(fill = STATEFP10)) +
labs(title = "not the most usefull plot")
d.counties %>%
ggplot(., aes(x = ALAND10)) +
geom_histogram(aes(fill = STATEFP10)) +
labs(title = "not the most usefull plot")
d.counties %>% sf::st_crs()
d.stations %>% sf::st_crs()
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
del.counties <- d.counties %>% dplyr::filter(STATEFP10 == 10)
del.stations <- st:st_intersection(d.stations, del.counties)
del.stations <- sf::st_intersection(d.stations, del.counties)
glimpse(del.stations)
plot(del.stations)
del.counties %>% st_area()
install.packages("pdflatex")
d.counties %>% group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10))
test <- d.counties %>% group_by(STATEFP10)
test
test <- d.counties %>% group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10))
test
glimpse(test$stateLandArea)
test <- d.counties %>% group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10 + AWATER10))
glimpse(test$stateLandArea)
#Psuedocode
#group variables by state and mutate column that holds state area
#mutate column that divides land area by state area
task1.1 <- d.counties %>% group_by(STATEFP10) %>% mutate(stateArea = sum(ALAND10 + AWATER10))
?divide
??divide
task1.1 %>% mutate(perLandAreaState = ALAND10/stateArea * 100)
tast1.1 <- task1.1 %>% mutate(perLandAreaState = ALAND10/stateArea * 100)
task1.1 <- task1.1 %>% mutate(perLandAreaState = ALAND10/stateArea * 100)
glimpse(task1.1$perLandAreaState)
test <- task1.1 %>% group_by(STATEFP10) %>% mutate(statetot = sum(perLandAreaState))
test$statetot
glimpse(task1.1$perLandAreaState)
remove(task1.1)
#create new df
task1.1 <- d.counties %>% group_by(STATEFP10) %>% mutate(stateArea = sum(ALAND10 + AWATER10)) %>% mutate(perLandAreaState = ALAND10/stateArea * 100)
remove(tast1.1)
?ungroup
#create new df
task1.1 <- d.counties %>% group_by(STATEFP10) %>%
mutate(stateArea = sum(ALAND10 + AWATER10)) %>%
ungroup(.) %>%
mutate(perLandAreaState = ALAND10/stateArea * 100)
View(task1.1)
glimpse(task1.1$perLandAreaState)
#Psuedocode
#group by state, find max of awater10/state area
task1.2 <- task1.1 %>% group_by(STATEFP10) %>%
max(AWATER10/stateArea)
#Psuedocode
#group by state, find max of awater10/state area
task1.2 <- task1.1 %>% group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
max(perWaterAreaState)
#Psuedocode
#group by state, find max of awater10/state area
task1.2 <- task1.1 %>% group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
max(task1.2$perWaterAreaState)
max(task1.2$perWaterAreaState)
#Psuedocode
#group by state, find max of awater10/state area
task1.2 <- task1.1 %>% group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100)
max(task1.2$perWaterAreaState)
?max
#Psuedocode
#group by state, find max of awater10/state area
task1.2 <- task1.1 %>% group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState, na.rm = TRUE))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState, na.rm = TRUE))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100)
summarise(max = max(perWaterAreaState, na.rm = TRUE))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState, na.rm = TRUE))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState))
#Psuedocode
#group by state, find max of awater10/state area using summary
task1.2 <- task1.1
task1.2 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
summarise(max = max(perWaterAreaState))
task1.2 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
lgPerWater <- task1.2 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
task1.2 <- task1.2 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
#create df with only state and county name columns
wettest_counties <- task1.2 %>% dplyr::select(ALAND10, NAMELSAD10)
#create df with only state and county name columns
wettest_counties <- task1.2 %>% ungroup() %>%
dplyr::select(ALAND10, NAMELSAD10)
wettest_counties
#create df with only state and county name columns
wettest_counties <- task1.2 %>% ungroup() %>%
dplyr::select(STATEFP10, NAMELSAD10)
wettest_counties
