# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
as_tibble() %>%
summarize(mean(polyArea))
task4.2
print(task4.2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
library(sp)
#set data
p.counties <- "./data/orig/County_Boundaries.shp"
p.stations <- "./data/orig/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#load into sf
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) { #check that tests are both TRUE
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect)) #create list with stat values
# print("Stats: mean, median, maximum, and minumum") #detail what will be printed
# print(statList) #print list of stats
sortVec <- sort(numVect) #sort vector from least to greatest
# print("Values in vector sorted from least to greatest") #detail what will be printed
# print(sortVec) #print sorted list
return(statlist, sortvec)
} else{
print("Troubleshooting Errors") #provide information on why vector failed tests
print("Vector:")
print(isVec) #provides details on whether input data was vector or not
print("Numbers:")
print(isNum) #provides detaisl on whether input data contained all numbers
}
}
#Test 1
task3.1(c(1, 0, -1))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) { #check that tests are both TRUE
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect)) #create list with stat values
print("Stats: mean, median, maximum, and minumum") #detail what will be printed
print(statList) #print list of stats
sortVec <- sort(numVect) #sort vector from least to greatest
print("Values in vector sorted from least to greatest") #detail what will be printed
print(sortVec) #print sorted list
# return(statlist, sortvec)
} else{
cat("Troubleshooting Errors") #provide information on why vector failed tests
cat("Vector: ", isVec)
# print(isVec) #provides details on whether input data was vector or not
cat("Numbers:", isNum)
# print(isNum) #provides detaisl on whether input data contained all numbers
}
}
#Test 1
task3.1(c(1, 0, -1))
#Test 2
task3.1(c(10, 100, 1000))
#Test 3
task3.1(c(.1, .001, 1e8))
#Test 4
task3.1(c("a", "b", "c"))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) { #check that tests are both TRUE
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect)) #create list with stat values
print("Stats: mean, median, maximum, and minumum") #detail what will be printed
print(statList) #print list of stats
sortVec <- sort(numVect) #sort vector from least to greatest
print("Values in vector sorted from least to greatest") #detail what will be printed
print(sortVec) #print sorted list
# return(statlist, sortvec)
} else{
cat("Troubleshooting Errors\n") #provide information on why vector failed tests
cat("Vector: ", isVec, "\n")
# print(isVec) #provides details on whether input data was vector or not
cat("Numbers:", isNum,"\n")
# print(isNum) #provides detaisl on whether input data contained all numbers
}
}
#Test 1
task3.1(c(1, 0, -1))
#Test 2
task3.1(c(10, 100, 1000))
#Test 3
task3.1(c(.1, .001, 1e8))
#Test 4
task3.1(c("a", "b", "c"))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) { #check that tests are both TRUE
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect)) #create list with stat values
# print("Stats: mean, median, maximum, and minumum") #detail what will be printed
# print(statList) #print list of stats
sortVec <- sort(numVect) #sort vector from least to greatest
# print("Values in vector sorted from least to greatest") #detail what will be printed
# print(sortVec) #print sorted list
result <- list(statlist, sortvec)
return(result)
} else{
cat("Troubleshooting Errors\n") #provide information on why vector failed tests
cat("Vector: ", isVec, "\n")
# print(isVec) #provides details on whether input data was vector or not
cat("Numbers:", isNum,"\n")
# print(isNum) #provides detaisl on whether input data contained all numbers
}
}
#Test 1
task3.1(c(1, 0, -1))
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) { #check that tests are both TRUE
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect)) #create list with stat values
# print("Stats: mean, median, maximum, and minumum") #detail what will be printed
# print(statList) #print list of stats
sortVec <- sort(numVect) #sort vector from least to greatest
# print("Values in vector sorted from least to greatest") #detail what will be printed
# print(sortVec) #print sorted list
result <- list(statList, sortVec)
return(result)
} else{
cat("Troubleshooting Errors\n") #provide information on why vector failed tests
cat("Vector: ", isVec, "\n")
# print(isVec) #provides details on whether input data was vector or not
cat("Numbers:", isNum,"\n")
# print(isNum) #provides detaisl on whether input data contained all numbers
}
}
#Test 1
task3.1(c(1, 0, -1))
#Test 2
task3.1(c(10, 100, 1000))
#Test 3
task3.1(c(.1, .001, 1e8))
#Test 4
task3.1(c("a", "b", "c"))
#Test 4
task3.1(c("a", "b", "c"))
d.stations2@geometry
# task4.3 <- d.stations2 %>%
st_bbox(d.stations2)
task4.3 <- d.stations2 %>% group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
summarize(mean(Drainage_A))
task4.3
task4.3 <- d.stations2 %>% group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
summarize(max(mean(Drainage_A)))
task4.3
task4.3 <- d.stations2 %>% group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
summarize(mean(Drainage_A))
task4.3
task4.3 <- d.stations2 %>% group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
as_tibble() %>%
summarize(mean(Drainage_A))
task4.3
task4.3 <- d.stations2 %>% group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
as_tibble() %>%
summarize(mean(Drainage_A))
task4.3
task4.3 <- d.stations2 %>% as_tibble() %>%
group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
summarize(mean(Drainage_A))
task4.3
max(task4.3$`mean(Drainage_A)`)
task4.3 <- d.stations2 %>% as_tibble() %>%
group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
summarize(which.max(mean(Drainage_A)))
task4.3
task4.3 <- d.stations2 %>% as_tibble() %>%
group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
which.max(mean(Drainage_A))
task4.3 <- d.stations2 %>% as_tibble() %>%
group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
which.max(which.mean(Drainage_A))
task4.3 <- d.stations2 %>% as_tibble() %>%
group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
summarize(mean(Drainage_A))
which.max(task4.3$`mean(Drainage_A)`)
meanDrain <- d.stations2 %>% as_tibble() %>%
group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
summarize(mean(Drainage_A))
maxPos <- which.max(meanDrain$`mean(Drainage_A)`)
task4.3 <- meanDrain[maxPos]
meanDrain <- d.stations2 %>% as_tibble() %>%
group_by(STATEFP10) %>% #group by state, d.stations2 was updated in task 4.1
summarize(mean(Drainage_A))
maxPos <- which.max(meanDrain$`mean(Drainage_A)`)
task4.3 <- meanDrain[maxPos,]
task4.3
print(meanDrain)
ls()
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
library(sp)
#set data
p.counties <- "./data/orig/County_Boundaries.shp"
p.stations <- "./data/orig/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#load into sf
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
glimpse(d.counties)
glimpse(d.counties)
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
d.counties %>% dplyr::select(-(GEOID10:CLASSFP10)) %>% head()
d.counties %>% group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10))
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>%
group_by(STATEFP10) %>%
summarise(stateLandArea = sum(ALAND10))
d.counties %>%
ggplot(., aes(x = as.factor(STATEFP10), y = ALAND10)) +
geom_boxplot(aes(fill = STATEFP10))
d.counties %>%
ggplot(., aes(x = ALAND10)) +
geom_histogram(aes(fill = STATEFP10)) +
labs(title = "not the most usefull plot")
d.counties %>% sf::st_crs()
d.stations %>% sf::st_crs()
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
del.counties <- d.counties %>% dplyr::filter(STATEFP10 == 10)
del.stations <- sf::st_intersection(d.stations, del.counties)
glimpse(del.stations)
plot(del.stations)
del.counties %>% st_area()
#create new df
task1.1 <- d.counties %>% group_by(STATEFP10) %>% #group variables by state and mutate column that holds state area
mutate(stateArea = sum(ALAND10 + AWATER10)) %>% #mutate column that divides land area by state area
ungroup(.) %>%
mutate(perLandAreaState = ALAND10/stateArea * 100) #create percentage variable by dividing land by state area and multiplying by 100
glimpse(task1.1$perLandAreaState)
#group by state, find max of awater10/state area using slice
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
#create df with only state and county name columns
wettest_counties <- task1.2 %>% ungroup() %>%
dplyr::select(STATEFP10, NAMELSAD10)
wettest_counties
#Use count function
task1.3 <- d.counties %>% as_tibble %>%
count(STATEFP10)
task1.3
#use mutate function to create new column with character length
task1.4 <- d.stations %>% as_tibble() %>%
mutate(., stNameLen = nchar(STATION_NA)) %>%
slice(which.min(stNameLen)) %>% #slice out the row with the min number of characters
dplyr::select(STATION_NA) #retain only station name
task1.4
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) + #set land on x and water on y
geom_point(aes(color = STATEFP10)) + #set color aestethic to state fips code
labs(title = "Relationship of land and water areas", x = "Land Area",
y = "Water Area", col = "State Code")
d.stations %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
#create new df
task2.2 <- d.stations %>%
#get state using stubstring function
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA)))
task2.2 %>% ggplot(aes(x = Drainage_A, fill = stateName)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count", col = "State")
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) { #check that tests are both TRUE
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect)) #create list with stat values
sortVec <- sort(numVect) #sort vector from least to greatest
result <- list(statList, sortVec) #combines desired data into one object for return function
return(result) #return result
} else{
cat("Troubleshooting Errors\n") #provide information on why vector failed tests
cat("Vector: ", isVec, "\n") #provides details on whether input data was vector or not
cat("Numbers:", isNum, "\n") #provides detaisl on whether input data contained all numbers
}
}
#Test 1
# task3.1(c(1, 0, -1))
#
# #Test 2
# task3.1(c(10, 100, 1000))
#
# #Test 3
# task3.1(c(.1, .001, 1e8))
#Test 4
task3.1(c("a", "b", "c"))
st_is_valid(d.counties) #was throwing an error so threw in to check
d.counties2 <- st_make_valid(d.counties) #make data valid for work
st_is_valid(d.counties2) #check success of make_valid
st_is_valid(d.stations) #check stations while at it
d.stations2 <- sf::st_intersection(d.counties2, d.stations) #intersect so stations get counties df info
task4.1 <- d.stations2 %>% as_tibble() %>% #count number of features per STATEFP10
count(STATEFP10)
task4.1
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
as_tibble() %>% #convert to tibble
summarize(mean(polyArea)) #calculate mean
task4.2
meanDrain <- d.stations2 %>% as_tibble() %>% #d.stations2 was updated in task 4.1 so no spatial ops needed
group_by(STATEFP10) %>% #group by state
summarize(mean(Drainage_A))
maxPos <- which.max(meanDrain$`mean(Drainage_A)`) #find the rowwhere the largest mean drainage is
task4.3 <- meanDrain[maxPos,] #subset tibble
task4.3
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
library(sp)
#set data
p.counties <- "./data/orig/County_Boundaries.shp"
p.stations <- "./data/orig/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#load into sf
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
glimpse(d.counties)
glimpse(d.counties)
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
d.counties %>% dplyr::select(-(GEOID10:CLASSFP10)) %>% head()
d.counties %>% group_by(STATEFP10) %>% mutate(stateLandArea = sum(ALAND10))
d.counties %>% as_tibble() %>% dplyr::select(-geometry) %>%
group_by(STATEFP10) %>%
summarise(stateLandArea = sum(ALAND10))
d.counties %>%
ggplot(., aes(x = as.factor(STATEFP10), y = ALAND10)) +
geom_boxplot(aes(fill = STATEFP10))
d.counties %>%
ggplot(., aes(x = ALAND10)) +
geom_histogram(aes(fill = STATEFP10)) +
labs(title = "not the most usefull plot")
d.counties %>% sf::st_crs()
d.stations %>% sf::st_crs()
d.counties %>% sf::st_crs() == d.stations %>% sf::st_crs()
del.counties <- d.counties %>% dplyr::filter(STATEFP10 == 10)
del.stations <- sf::st_intersection(d.stations, del.counties)
glimpse(del.stations)
plot(del.stations)
del.counties %>% st_area()
# d.counties3 <- sf::st_intersection()
class(d.stations2)
# d.counties3 <- sf::st_intersection()
d.stations2 <- sf::st_intersection(d.counties2, d.stations)
# d.counties3 <- sf::st_intersection()
d.stations2 <- sf::st_intersection(d.counties2, d.stations)
class(d.stations2)
geomStat <- st_geometry(d.stations2)
geomStat
d.stations2 <- sf::st_intersection(d.counties2, d.stations)
class(d.stations2)
geomStat <- st_geometry(d.stations2)
geomStat
d.counties3 <- sf::st_intersection(d.stations, d.counties2)
class(d.counties3)
geomStat2 <- st_geometry(d.counties3)
geomStat2
st_geometry(d.counties)
st_geometry(d.counties2)
View(d.counties3)
View(d.counties3)
View(d.stations2)
View(d.stations2)
View(d.counties2)
View(d.counties2)
d.stations2 <- sf::st_intersection(d.counties2, d.stations)
st_geometry(d.stations2)
d.counties3 <- sf::st_intersection(d.stations, d.counties2)
st_geometry(d.counties3)
st_is_valid(d.counties) #was throwing an error so threw in to check
d.counties2 <- st_make_valid(d.counties) #make data valid for work
st_is_valid(d.counties2) #check success of make_valid
st_is_valid(d.stations) #check stations while at it
d.stations2 <- sf::st_intersection(d.stations, d.counties2) #intersect so stations get counties df info
task4.1 <- d.stations2 %>% as_tibble() %>% #count number of features per STATEFP10
count(STATEFP10)
task4.1
#group by state, find max of awater10/state area using slice
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
#create df with only state and county name columns
task1.2 <- task1.2 %>% ungroup() %>%
dplyr::select(STATEFP10, NAMELSAD10)
task1.2
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(sf)
library(sp)
#set data
p.counties <- "./data/orig/County_Boundaries.shp"
p.stations <- "./data/orig/Non-Tidal_Water_Quality_Monitoring_Stations_in_the_Chesapeake_Bay.shp"
#load into sf
d.counties <- sf::read_sf(p.counties)
d.stations <- sf::read_sf(p.stations)
glimpse(d.counties)
glimpse(d.counties)
d.counties %>% dplyr::select(GEOID10, ALAND10) %>% head()
d.counties %>% dplyr::select(GEOID10:CLASSFP10) %>% head()
d.counties %>% dplyr::select(-(GEOID10:CLASSFP10)) %>% head()
#create new df
task1.1 <- d.counties %>% group_by(STATEFP10) %>% #group variables by state and mutate column that holds state area
mutate(stateArea = sum(ALAND10 + AWATER10)) %>% #mutate column that divides land area by state area
ungroup(.) %>%
mutate(perLandAreaState = ALAND10/stateArea * 100) #create percentage variable by dividing land by state area and multiplying by 100
glimpse(task1.1$perLandAreaState)
#group by state, find max of awater10/state area using slice
task1.2 <- task1.1 %>% as_tibble() %>%
group_by(STATEFP10) %>%
mutate(perWaterAreaState = AWATER10/stateArea * 100) %>%
slice(which.max(perWaterAreaState))
#create df with only state and county name columns
task1.2 <- task1.2 %>% ungroup() %>%
dplyr::select(STATEFP10, NAMELSAD10)
task1.2
#Use count function
task1.3 <- d.counties %>% as_tibble %>%
count(STATEFP10)
task1.3
#use mutate function to create new column with character length
task1.4 <- d.stations %>% as_tibble() %>%
mutate(., stNameLen = nchar(STATION_NA)) %>%
slice(which.min(stNameLen)) %>% #slice out the row with the min number of characters
dplyr::select(STATION_NA) #retain only station name
task1.4
d.counties %>%
ggplot(aes(x = ALAND10, y = AWATER10)) + #set land on x and water on y
geom_point(aes(color = STATEFP10)) + #set color aestethic to state fips code
labs(title = "Relationship of land and water areas", x = "Land Area",
y = "Water Area", col = "State Code")
d.stations %>%
ggplot(aes(x = Drainage_A)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count")
#create new df
task2.2 <- d.stations %>%
#get state using stubstring function
mutate(stateName = substr(STATION_NA, nchar(STATION_NA)-1, nchar(STATION_NA)))
task2.2 %>% ggplot(aes(x = Drainage_A, fill = stateName)) + #set drainage ares on x axis
geom_histogram() + #create histogram
labs(title = "Station Drainage Area Histogram", x = "Drainage Area Size",
y = "Count", col = "State")
task3.1 <- function(numVect){
isVec <- is.vector(numVect) #test if it is vector
isNum <- is.numeric(numVect) #test if list is all numeric
if(isVec == TRUE & isNum == TRUE) { #check that tests are both TRUE
statList <- list(mean(numVect), median(numVect), max(numVect), min(numVect)) #create list with stat values
sortVec <- sort(numVect) #sort vector from least to greatest
result <- list(statList, sortVec) #combines desired data into one object for return function
return(result) #return result
} else{
cat("Troubleshooting Errors\n") #provide information on why vector failed tests
cat("Vector: ", isVec, "\n") #provides details on whether input data was vector or not
cat("Numbers:", isNum, "\n") #provides detaisl on whether input data contained all numbers
}
}
#Test 1
task3.1(c(1, 0, -1))
#Test 2
task3.1(c(10, 100, 1000))
#Test 3
task3.1(c(.1, .001, 1e8))
#Test 4
task3.1(c("a", "b", "c"))
st_is_valid(d.counties) #was throwing an error so threw in to check
d.counties2 <- st_make_valid(d.counties) #make data valid for work
st_is_valid(d.counties2) #check success of make_valid
st_is_valid(d.stations) #check stations while at it
d.stations2 <- sf::st_intersection(d.stations, d.counties2) #intersect so stations get counties df info
task4.1 <- d.stations2 %>% as_tibble() %>% #count number of features per STATEFP10
count(STATEFP10)
task4.1
# NY FIPS = 36
task4.2 <- d.counties2 %>% filter(STATEFP10 == 36) %>% # select counties in NY
mutate(polyArea = st_area(geometry)) %>%  #calculate area of counties
as_tibble() %>% #convert to tibble
summarize(mean(polyArea)) #calculate mean
task4.2
meanDrain <- d.stations2 %>% as_tibble() %>% #d.stations2 was updated in task 4.1 so no spatial ops needed
group_by(STATEFP10) %>% #group by state
summarize(mean(Drainage_A))
maxPos <- which.max(meanDrain$`mean(Drainage_A)`) #find the rowwhere the largest mean drainage is
task4.3 <- meanDrain[maxPos,] #subset tibble
task4.3
d.stations3 <- sf::st_intersection(d.stations, d.counties2)
st_geometry(d.stations3) #get geometry of sf object
d.counties3 <- sf::st_intersection(d.counties2, d.stations)
st_geometry(d.counties3) #get geometry of sf object
plot(d.stations3$geometry)
plot(d.counties3$geometry)
install.packages("latex")
